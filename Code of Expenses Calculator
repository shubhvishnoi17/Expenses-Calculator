import java.util.InputMismatchException;
import java.util.Scanner;

// Interface for abstraction
interface ExpenseOperations {
    void addExpense(String category, double amount, String date);
    void viewExpenses();
    double calculateTotal();
}

// Parent class
class User {
    protected String name;
    protected int userID;
    protected static int userCount = 0;

    public User(String name) {
        this.name = name;
        this.userID = ++userCount;
    }

    public void displayUserInfo() {
        System.out.println("\n--- User Info ---");
        System.out.println("Name: " + name);
        System.out.println("User ID: " + userID);
    }
}

// Class to store single expense – Encapsulation
class ExpenseItem {
    private String category;
    private double amount;
    private String date;

    public ExpenseItem(String category, double amount, String date) {
        this.category = category;
        this.amount = amount;
        this.date = date;
    }

    public void displayExpense() {
        System.out.println(category + " - ₹" + amount + " on " + date);
    }

    public double getAmount() {
        return amount;
    }
}

// Child class implementing interface
class Expense extends User implements ExpenseOperations {
    private ExpenseItem e1, e2, e3, e4, e5, e6, e7, e8, e9, e10;
    private int count = 0;

    public Expense(String name) {
        super(name);
    }

    public void addExpense(String category, double amount, String date) {
        if (amount <= 0 || category.isEmpty() || date.isEmpty()) {
            System.out.println("Invalid expense data. Please try again.");
            return;
        }

        ExpenseItem newExpense = new ExpenseItem(category, amount, date);
        count++;

        switch (count) {
            case 1: e1 = newExpense; break;
            case 2: e2 = newExpense; break;
            case 3: e3 = newExpense; break;
            case 4: e4 = newExpense; break;
            case 5: e5 = newExpense; break;
            case 6: e6 = newExpense; break;
            case 7: e7 = newExpense; break;
            case 8: e8 = newExpense; break;
            case 9: e9 = newExpense; break;
            case 10: e10 = newExpense; break;
            default:
                System.out.println("Limit reached! Maximum 10 expenses allowed.");
                count--;
                return;
        }

        System.out.println("Expense added successfully.");
    }

    public void viewExpenses() {
        System.out.println("\n--- Expense List ---");
        if (count == 0) {
            System.out.println("No expenses recorded.");
            return;
        }

        if (e1 != null) e1.displayExpense();
        if (e2 != null) e2.displayExpense();
        if (e3 != null) e3.displayExpense();
        if (e4 != null) e4.displayExpense();
        if (e5 != null) e5.displayExpense();
        if (e6 != null) e6.displayExpense();
        if (e7 != null) e7.displayExpense();
        if (e8 != null) e8.displayExpense();
        if (e9 != null) e9.displayExpense();
        if (e10 != null) e10.displayExpense();
    }

    public double calculateTotal() {
        double total = 0;
        if (e1 != null) total += e1.getAmount();
        if (e2 != null) total += e2.getAmount();
        if (e3 != null) total += e3.getAmount();
        if (e4 != null) total += e4.getAmount();
        if (e5 != null) total += e5.getAmount();
        if (e6 != null) total += e6.getAmount();
        if (e7 != null) total += e7.getAmount();
        if (e8 != null) total += e8.getAmount();
        if (e9 != null) total += e9.getAmount();
        if (e10 != null) total += e10.getAmount();
        return total;
    }
}

// Main class
public class ExpenseCalculatorApp {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Welcome to Expense Calculator!");

        System.out.print("Enter your name: ");
        String name = sc.nextLine().trim();
        if (name.isEmpty()) {
            System.out.println("Invalid name. Exiting.");
            return;
        }

        Expense expenseTracker = new Expense(name);
        expenseTracker.displayUserInfo();

        int choice = 0;
        do {
            System.out.println("\n---- Menu ----");
            System.out.println("1. Add Expense");
            System.out.println("2. View Expenses");
            System.out.println("3. Calculate Total");
            System.out.println("4. Exit");
            System.out.print("Enter choice: ");

            try {
                choice = sc.nextInt();
                sc.nextLine(); // consume newline

                switch (choice) {
                    case 1:
                        System.out.print("Enter category: ");
                        String category = sc.nextLine();
                        System.out.print("Enter amount: ");
                        double amount = sc.nextDouble();
                        sc.nextLine();
                        System.out.print("Enter date (dd-mm-yyyy): ");
                        String date = sc.nextLine();
                        expenseTracker.addExpense(category, amount, date);
                        break;

                    case 2:
                        expenseTracker.viewExpenses();
                        break;

                    case 3:
                        double total = expenseTracker.calculateTotal();
                        System.out.println("Total Expenses: ₹" + total);
                        break;

                    case 4:
                        System.out.println("Thank you for using Expense Calculator!");
                        break;

                    default:
                        System.out.println("Invalid choice. Please select from 1-4.");
                }

            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter a valid number.");
                sc.nextLine(); // clear buffer
            }

        } while (choice != 4);

        sc.close();
    }
}
