import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

// Interface for abstraction
interface ExpenseOperations {
    void addExpense(String category, double amount, String date);
    void viewExpenses();
    double calculateTotal();
}

// User class
class User {
    protected String name;
    protected int userID;
    protected static int userCount = 0;

    public User(String name) {
        this.name = name;
        this.userID = ++userCount;
    }
}

// ExpenseItem class
class ExpenseItem {
    private String category;
    private double amount;
    private String date;

    public ExpenseItem(String category, double amount, String date) {
        this.category = category;
        this.amount = amount;
        this.date = date;
    }

    public String toString() {
        return category + " - ₹" + amount + " on " + date;
    }

    public double getAmount() {
        return amount;
    }
}

// Expense class
class Expense extends User implements ExpenseOperations {
    private ExpenseItem[] items = new ExpenseItem[10];
    private int count = 0;

    public Expense(String name) {
        super(name);
    }

    public void addExpense(String category, double amount, String date) {
        if (count >= 10) {
            JOptionPane.showMessageDialog(null, "Limit reached! Only 10 expenses allowed.");
            return;
        }
        items[count++] = new ExpenseItem(category, amount, date);
    }

    public void viewExpenses(JTextArea outputArea) {
        outputArea.setText("🧾 Expense List:\n\n");
        for (int i = 0; i < count; i++) {
            outputArea.append((i + 1) + ". " + items[i].toString() + "\n");
        }
    }

    public void viewExpenses() {} // Unused in GUI

    public double calculateTotal() {
        double total = 0;
        for (int i = 0; i < count; i++) {
            total += items[i].getAmount();
        }
        return total;
    }
}

// GUI Class
public class ExpenseCalculatorGUI {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            new ExpenseCalculatorGUI().createGUI();
        });
    }

    private void createGUI() {
        JFrame frame = new JFrame("💸 Expense Calculator");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(650, 700);
        frame.setLayout(new BorderLayout());
        frame.getContentPane().setBackground(new Color(240, 248, 255));

        Font font = new Font("Arial", Font.BOLD, 16);

        // Input Panel
        JPanel inputPanel = new JPanel(new GridLayout(5, 2, 10, 10));
        inputPanel.setBorder(BorderFactory.createTitledBorder("Enter Expense Details"));
        inputPanel.setBackground(new Color(220, 230, 241));

        JTextField nameField = new JTextField();
        JTextField categoryField = new JTextField();
        JTextField amountField = new JTextField();
        JTextField dateField = new JTextField();

        nameField.setFont(font);
        categoryField.setFont(font);
        amountField.setFont(font);
        dateField.setFont(font);

        inputPanel.add(new JLabel("Your Name:")); inputPanel.add(nameField);
        inputPanel.add(new JLabel("Category:")); inputPanel.add(categoryField);
        inputPanel.add(new JLabel("Amount (₹):")); inputPanel.add(amountField);
        inputPanel.add(new JLabel("Date (dd-mm-yyyy):")); inputPanel.add(dateField);

        // Buttons
        JButton addButton = new JButton("➕ Add Expense");
        JButton viewButton = new JButton("📜 View Expenses");
        JButton totalButton = new JButton("🧮 Calculate Total");

        addButton.setBackground(new Color(59, 170, 106));
        viewButton.setBackground(new Color(100, 149, 237));
        totalButton.setBackground(new Color(255, 165, 0));

        addButton.setForeground(Color.WHITE);
        viewButton.setForeground(Color.WHITE);
        totalButton.setForeground(Color.WHITE);

        addButton.setFont(font);
        viewButton.setFont(font);
        totalButton.setFont(font);

        JPanel buttonPanel = new JPanel(new FlowLayout());
        buttonPanel.setBackground(new Color(240, 248, 255));
        buttonPanel.add(addButton);
        buttonPanel.add(viewButton);
        buttonPanel.add(totalButton);

        // Output area
        JTextArea outputArea = new JTextArea(12, 40);
        outputArea.setEditable(false);
        outputArea.setFont(new Font("Monospaced", Font.PLAIN, 16));
        outputArea.setBackground(new Color(250, 250, 250));
        JScrollPane scrollPane = new JScrollPane(outputArea);
        scrollPane.setBorder(BorderFactory.createTitledBorder("📊 Output"));

        frame.add(inputPanel, BorderLayout.NORTH);
        frame.add(buttonPanel, BorderLayout.CENTER);
        frame.add(scrollPane, BorderLayout.SOUTH);

        final Expense[] expense = {null};

        // Add Expense Logic
        addButton.addActionListener(e -> {
            try {
                if (expense[0] == null) {
                    String name = nameField.getText().trim();
                    if (name.isEmpty()) throw new Exception("Name required!");
                    expense[0] = new Expense(name);
                }
                String category = categoryField.getText().trim();
                double amount = Double.parseDouble(amountField.getText().trim());
                String date = dateField.getText().trim();

                if (category.isEmpty() || date.isEmpty() || amount <= 0)
                    throw new Exception("Fill all fields properly!");

                expense[0].addExpense(category, amount, date);
                JOptionPane.showMessageDialog(frame, "✅ Expense added successfully!");
                categoryField.setText(""); amountField.setText(""); dateField.setText("");

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(frame, "❌ Error: " + ex.getMessage());
            }
        });

        // View Expenses Logic
        viewButton.addActionListener(e -> {
            if (expense[0] != null) {
                expense[0].viewExpenses(outputArea);
            } else {
                outputArea.setText("No expenses to show.");
            }
        });

        // Calculate Total Logic
        totalButton.addActionListener(e -> {
            if (expense[0] != null) {
                double total = expense[0].calculateTotal();
                outputArea.setText("💰 Total Expenses: ₹" + total);
            } else {
                outputArea.setText("No expenses to calculate.");
            }
        });

        frame.setVisible(true);
    }
}

